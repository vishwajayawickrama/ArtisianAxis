name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
      working-directory: ./frontend
    
    - name: Run tests
      run: npm test -- --coverage --passWithNoTests
      working-directory: ./frontend
    
    - name: Run linting
      run: npm run lint || true
      working-directory: ./frontend
    
    - name: Build application
      run: npm run build
      working-directory: ./frontend

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/react-app:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/react-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.HOST }}
        username: ${{ env.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to app directory
          cd /opt/react-app || mkdir -p /opt/react-app && cd /opt/react-app
          
          # Create docker-compose.yml if it doesn't exist
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            react-app:
              image: ${{ secrets.DOCKER_USERNAME }}/react-app:latest
              container_name: react-app
              ports:
                - "3000:80"
              restart: unless-stopped
              environment:
                - NODE_ENV=production
          EOF
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/react-app:latest
          
          # Stop and remove existing container
          docker-compose down || true
          
          # Start new container
          docker-compose up -d
          
          # Clean up old images
          docker image prune -f