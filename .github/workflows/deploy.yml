name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend
    - name: Build application
      run: npm run build
      working-directory: ./frontend

  test-backend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: ./backend
    - name: Check Django configuration
      run: python manage.py check
      working-directory: ./backend

  build-and-deploy:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/artisan-frontend:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/artisan-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/artisan-backend:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/artisan-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to app directory
          cd /opt/artisan-app || (mkdir -p /opt/artisan-app && cd /opt/artisan-app)
          
          # Create docker-compose.yml without Nginx
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            backend:
              image: ${{ secrets.DOCKER_USERNAME }}/artisan-backend:latest
              container_name: artisan-backend
              environment:
                - DATABASE_URL=${{ secrets.SUPABASE_DATABASE_URL }}
                - DEBUG=False
                - SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
                - ALLOWED_HOSTS=artisianaxis.vishwajayawickrama.me,${{ secrets.HOST }},localhost,127.0.0.1
                - CORS_ALLOWED_ORIGINS=http://artisianaxis.vishwajayawickrama.me,http://${{ secrets.HOST }}
              ports:
                - "8000:8000"
              restart: unless-stopped
              networks:
                - artisan-network

            frontend:
              image: ${{ secrets.DOCKER_USERNAME }}/artisan-frontend:latest
              container_name: artisan-frontend
              environment:
                - VITE_API_URL=http://artisianaxis.vishwajayawickrama.me/api
              ports:
                - "3000:80"
              depends_on:
                - backend
              restart: unless-stopped
              networks:
                - artisan-network

          networks:
            artisan-network:
              driver: bridge
          EOF
          
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/artisan-frontend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/artisan-backend:latest
          
          # Stop and remove existing containers
          docker-compose down || true
          
          # Start all containers
          docker-compose up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Clean up old images
          docker image prune -f
